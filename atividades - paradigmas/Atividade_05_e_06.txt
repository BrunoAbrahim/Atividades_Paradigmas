Atividades Práticas de Laboratório (Capítulos 5 e 6 do Sebesta)

Atividade 1 – Escopo Estático x Escopo Dinâmico

 Em Python:
x = 10  # variável global

def f():
    print("x em f():", x)

def g():
    x = 20  # variável local em g()
    f()     # chama f()

g()


 Resultado esperado:

x em f(): 10


O Python usa escopo estático (léxico) → a função f() "enxerga" a variável do local onde foi definida, não de onde foi chamada.

 Em JavaScript:

let x = 10; // variável global

function f() {
    console.log("x em f():", x);
}

function g() {
    let x = 20; // variável local em g()
    f();        // chama f()
}

g();


 Resultado esperado:

x em f(): 10


O JavaScript moderno também usa escopo estático, mas em versões antigas (com var) era possível simular algo próximo de dinâmico em alguns contextos.

 Perguntas para reflexão:

O valor impresso depende do local de definição da função, não do local de chamada.

Python e JavaScript seguem o escopo estático.

Linguagens com escopo dinâmico (como Lisp antigo) fariam f() pegar o x = 20 de g().

Atividade 2 – Tempo de Vida das Variáveis

 Em C:
#include <stdio.h>

void contador() {
    int a = 0;        // variável automática
    static int b = 0; // variável estática

    a++;
    b++;

    printf("a = %d, b = %d\n", a, b);
}

int main() {
    contador();
    contador();
    contador();
    return 0;
}


 Saída esperada:

a = 1, b = 1
a = 1, b = 2
a = 1, b = 3


 Perguntas para reflexão:

a é recriada em cada chamada (tempo de vida automático, ligado ao bloco).

b mantém seu valor entre chamadas (tempo de vida estático, ligado ao programa inteiro).

Isso mostra a diferença entre tempo de vida (quanto tempo a variável existe) e escopo (onde pode ser acessada).

 Capítulo 6 – Tipos de Dados
Atividade 3 – Declaração de Tipos e Coerção

 Em Java:

public class TesteTipos {
    public static void main(String[] args) {
        int num = 10;
        // num = "dez"; // ERRO: não é permitido

        // tentativa de soma
        int resultado = num + 5; 
        System.out.println("Resultado: " + resultado);
    }
}


 Resultado: funciona apenas com inteiros. Tentar atribuir string gera erro de compilação.

 Em Python:

num = 10
print(num + 5)   # funciona -> 15

num = "dez"
print(num + 5)   # ERRO em tempo de execução (TypeError)


 Resultado:

Python permite mudar o tipo da variável (tipagem dinâmica).

Mas não faz coerção automática entre string e inteiro (gera erro ao somar).

 Perguntas para reflexão:

Java não permite → tipagem estática forte.

Python permite → tipagem dinâmica, mas pode causar erros em tempo de execução.

Vantagem estática: segurança e desempenho.

Vantagem dinâmica: flexibilidade e rapidez no desenvolvimento.

Atividade 4 – Arrays e Registros (Structs)

 Em C:

#include <stdio.h>
#include <string.h>

struct Livro {
    char titulo[50];
    char autor[50];
    int anoPublicacao;
};

int main() {
    // Array de inteiros
    int numeros[5] = {1, 2, 3, 4, 5};

    // Struct
    struct Livro livro1;
    strcpy(livro1.titulo, "O Senhor dos Aneis");
    strcpy(livro1.autor, "J.R.R. Tolkien");
    livro1.anoPublicacao = 1954;

    printf("Array: %d %d %d %d %d\n", numeros[0], numeros[1], numeros[2], numeros[3], numeros[4]);
    printf("Livro: %s (%d)\n", livro1.titulo, livro1.anoPublicacao);

    return 0;
}

 Em Java:

import java.util.ArrayList;

class Livro {
    String titulo;
    String autor;
    int anoPublicacao;

    Livro(String titulo, String autor, int anoPublicacao) {
        this.titulo = titulo;
        this.autor = autor;
        this.anoPublicacao = anoPublicacao;
    }
}

public class TesteLivros {
    public static void main(String[] args) {
        ArrayList<Livro> livros = new ArrayList<>();

        livros.add(new Livro("O Hobbit", "Tolkien", 1937));
        livros.add(new Livro("1984", "George Orwell", 1949));
        livros.add(new Livro("Duna", "Frank Herbert", 1965));

        System.out.println("Títulos adicionados:");
        for (Livro l : livros) {
            System.out.println(l.titulo);
        }
    }
}


 Saída esperada:

Títulos adicionados:
O Hobbit
1984
Duna


Perguntas para reflexão:

Array: coleção homogênea (todos os elementos do mesmo tipo).

Struct/Classe: coleção heterogênea (diferentes tipos de dados agrupados).

Use array quando precisa de dados simples e homogêneos.

Use struct/classe quando os dados precisam ter significado semântico (ex.: livro, aluno, produto).